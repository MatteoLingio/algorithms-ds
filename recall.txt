Table of content
1) Big O
2) Performance of Arrays and Objects
3) Problem solving approach
4) Problem solving patterns
5) Recursion
6) Searching algos
7) Sorting algos
8) Singly Link List
9) Doubly Link List
10) Stacks + queues
11) Binary Search Trees
12) Tree Traversal
13) Binary Heaps
14) Hash Table
15) Graphs
16) Graph Traversal
17) Dijkstra's Algo
18) Dynamic Programming


1- Big O Notation

Big O notation is a method used to express the efficiency of an alghoritm,
understood as a group of steps taken for resolving a problem.
Big O notation is used to express both time and space complexity of an algo,
space refer to the memory space usage of that algo.
Representing Big O like a scale there are different levels:
- O(1) costant: perfect 
       algo takes always same speed/space indipendently by input size
- O(log n) logarithmic: very good
       algo time/space increase loghartmically with increasing input size
- O(n) linear: good
       algo time/space increase linearly with increasing input size
- O(n log n) : not so good
       this is the product of log and linear (merge sort, quick sort) 
- O(n^2) exponential: really bad
       the space/size increase exponentially with increasing input size


2- Performance of arrays and objects

Arrays are very good to store linear ordered data, they excell in adding/removing
items from the end of array and to get a particular item at any position, this
operations take constant time.
Arrays are not so good at adding removing items at start or inserting elements
at any given position, beacuse this opearations needs a reindexing of array, these
opeartions takes linea time.

Objects are really good to store unordered data, they excell in adding/removing and
accessing values, these operations takes constant time, other operation like 
searching for values or sorting for values are more expensive in terms of 
efficiency.

3- Problem Solving techniques

- Undestand the problem, ask questions try to understand inputs and ouputs.
- Formulate concrete examples starting from small ones, try to understand edge cases
  constraints, if needed draw.
- Break down some steps to solve a problem, if the problem is difficult try with
  brute force solution first, then try to spot some pattern and come with a better
  solution.
- Start to code
- Look back and refactor - code quality but also efficiency usually if an algo takes
  O(n ^ 2) the algo can be improved.

4- Problem solving patterns

- Frequency counter:

  -Instanciate a lookup object
  -Loop over a collection
  -Track the occurencies of items inside the lookup obj.

This is a usefull technique to use when the requirement is to find the most frequent item,
or comparing frequency of items ex (anagrams)

- Multiple pointers

  -Initialize two pointers
  -Iterate and move the pointers untill find the result

This is usefull for finding couples of numbers that resolve to a target ex:
    -Are there two numbers in SORTED array that sums to a number?
    -Check if a string is contained as subsequence in another string (sing, sting)

-Sliding window

This is usefull to keep track of a subset of a collection ex: 
    -Find the max sum inside an array of numbers given by a max of n number

findMaxSum([1,3,2,1,5], 3)

-define a window [1,3,2] sum = 6 and maxsum variable
-move the window up [3,2,1]
-subtract the old first element 1 and add the new last element 1
-if new sum is bigger than old update the maxsum variable
-iterate until end of array

5- Recursion 

recursion is the process of fucntions calling themselves with different parameters
until a base case is met, this is an alternative approach to iterative solutions.
when a function is called the engine put the function on a stack named "call stack", 
the function is removed from the call stack when returns.
So in case of recursion the same function is put on the call stack with different params,
when the base case is met, the function returns and is removed from the stack, this process
is repeat until the call stack is empty.

function factorial(n){
    if(n === 1) return 1;
    return n * factorial(n - 1) 
}

factorial(3)

---call stack---

Put on call stack
3) 1 (base case)
2) 2 * factorial(1)
1) 3 * factorial(2)

Pop from call stack
1) 1 returned
2) 2 * 1 = 2 returned
3) 3 * 2 = 6 returned 

6 is factorial of 3

-----------------


6- Searching algos

There are different ways to search elements inside a collection, some of that are:
    -Linear search, search for every item in the collection if is the element to search.
    -Binary search, split the collection in 2 if the element to search is bigger than
    the middle element proceed to right else proceed to left, repeat the process until
    the element is found or the subarray length is 0. O(log n)

7- Sorting algos

There are different ways to sort a collection:

-Bubble Sort O(n^2)

for every item in array compare the item with next one if item is bigger than the other
item swap the items, the process is repeated until the items are sorted.
At the end of every iteration the biggest value is put at the bottom of the collection.
A possible ottimization is to check if at least one swap has been made though the iteration
if no swap were performed it means that the collection is sorted, so we can break from
the iteration process.

-Selection Sort O(n ^ 2)

for every item in the list check which one is the smallest, once has been found put the
smallest number at the start of the collection and repeat the process until the 
array is sorted.

-Insertion Sort O(n ^ 2)
The concept behind this sorting algo is to take the element and place it in the correct 
position in the left sorted part of collection.
3 1 5 2

-check if 1 is smaller than 3 -swap 1 and 3

1 3 5 2

-check if 5 is smaller than 3 - ceck if 5 is smaller than 1 

1 3 5 2

-check if 2 is smaller than 5 - swap 5 and 2 - check if 2 is smaller than 3 swap 2 and 3
-check if 2 is smaller than 1

1 2 3 4 5

-Merge Sort (n log n)

The merge sort algo is based on the concept of splitting the collection in smaller pieces
until there are n 1 size pieces after that merge the smaller pieces sorted.

                                3 1 4 2
                              3 1     4 2
                            3   1     4   2
                              1 3     2 4
                                1 2 3 4

-Define a merge function which take two SORTED arrays and merge them together
-Define a mergesort function which recusevely split the array and uses the merge function
 to merge than back


-Quick Sort(n log n)

quick sort algo builds upon the pivot concept a pivot is an arbitrary element in the array,
the pivot should be in the correct poisition in the array at the end of iteration, 
in the next iteration the pivot is changed, the process is repeated until every pivot is in
the correct spot.

p
2 3 4 1 6 5

2 1 4 3 6 5

    p
1 2 4 3 6 5

        p
1 2 3 4 6 5

1 2 3 4 5 6


in the first case the pivot is 2 we search for every element that is smaller than 2,
the only one is 1, a counter of numbers smaller than pivot is updated and 1 is swapped with
3, at the end of iteration the pivot is pushed in the correct position, now the process
is repeated for the left side of the pivot and right side recursevely, until the array is
ordered.


-Radix Sort

it difference from others because is not a comparative alghoritm, it works only with numbers
because uses the digits of any number to sort.


for every number inside in array it takes the last digit in number and put
the number inside a bucket related to the last digit, after all numbers are
done the buckets are rearanged in an array, this process is repeated for every digit in
the biggest number in array

12, 345, 1, 189

buckets: [[], [1], [12], [], [], [345], [], [], [], [189]]

1 12 345, 189
[1], [12], [], [], [345], [], [], [], [189], []]
[1 12 345 189
[1, 12], [189], [], [345], [], [], [], [], [], []]
1 12 189 345

Appendix

-to get number of digits in number use log10(n) + 1
-to get a digit of n (n / pow(10, positionofdigit)) % 10

-----------------------------------------------------------------------------------------

Data Structures

8- Singly Linked List

Singly linked list is a type of data structures in which every item hold a reference to
the next item in the list. There are a head and a tail the tail is the end of the list
which its next element is null.

head             tail
12 -> 23 -> 1 -> 32 -> null

singly linked list are really usefull when tehre is the needs to add remove items from start
or from end, operations inside the list are quite expensive because the items cannot
be accessed directly but every time the list needs to be traversed from start to finish.
In case of 1 item head and tail are the same.


9- Doubly linked list 

Doubly linked list are really similar to singly linked list but in this case every node
holds a reference to the next item in the list but also to the previous node in the list.
these feature allow the list to be traversed not only from start to end but also backwards,
operations inside doubly linked are usually less expensive than sinly linked list, but 
are more expensive in space complexity because the memory stores the previous node information
other than the next.

       head           tail
null<- 1 <- 2 <- 3 <- 4 -> null
         ->   ->   ->   

